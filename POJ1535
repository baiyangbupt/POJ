//
//  main.cpp
//  POJ1535
//
//  Created by B-YMac on 14-8-10.
//  Copyright (c) 2014å¹´ B-YMac. All rights reserved.
//

#include <iostream>
#include <queue>
using namespace std;

int l,w,crosses,dx[4] = {0,0,1,-1}, dy[4] = {1,-1,0,0};
bool grid[101][101],visit[101][101];

struct point{
    int x,y;
};

point sr,des;
struct node{
    int sx,sy,dx,dy;
    int dir;
    node(int a, int b, int c, int d, int e): sx(a), sy(b), dx(c), dy(d), dir(e){}
};

bool inrange(int x, int y){
    return 0<=x&&x<l&&0<=y&&y<w&&grid[x][y]==0;
}

bool bfs(){
    memset(visit,0,sizeof(visit));
    queue<node> q;
    for(int i = 0; i < 4; i++)
        q.push(node(sr.x,sr.y,des.x,des.y,i));
    
    while(!q.empty()){
        node t = q.front();
        q.pop();
        if(t.sx==t.dx&&t.sy==t.dy)
            return 1;
        if(t.sx==des.x&&t.sy==des.y)
            return t.dx==sr.x&&t.dy==sr.y;
        if(t.dx==sr.x&&t.dy==sr.y)
            return t.sx==des.x&&t.sy==des.y;
        
        int sx = t.sx, sy = t.sy, desx = t.dx, desy = t.dy, dir = t.dir;
        //cout << sx << ' ' << sy << ' '<< desx << ' '<< desy << endl;
        if(visit[sx][sy])
            continue;
        visit[sx][sy] = 1;
        if(inrange(sx+dx[dir],sy+dy[dir])&&inrange(desx-dx[dir],desy-dy[dir])){
           q.push(node(sx+dx[dir],sy+dy[dir],desx-dx[dir],desy-dy[dir],dir));
        }
        
        for(int i = 0; i < 4; i++)
            if(i/2!=dir/2){
                int nsx = sx+dx[i], nsy = sy+dy[i], ndx = desx-dx[i], ndy = desy-dy[i];
                if(inrange(nsx,nsy)&&inrange(ndx,ndy)){
                    q.push(node(nsx,nsy,ndx,ndy,i));
                }
            }
    }
    
    return 0;
}

int main(int argc, const char * argv[])
{
    while(cin>>l>>w,l||w){
        cin >> sr.x >> sr.y >> des.x >> des.y;
        cin >> crosses;
        memset(grid,0,sizeof(grid));
        for(int i = 0; i < crosses; i++){
            int x,y;
            cin >> x >> y;
            grid[x][y] = 1;
        }
        
        bool res = bfs();
        
        if(res)
            cout << "YES" << endl;
        else
            cout << "NO" << endl;
    }
    return 0;
}

