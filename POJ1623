//
//  main.cpp
//  POJ1623
//
//  Created by B-YMac on 14-9-14.
//  Copyright (c) 2014å¹´ B-YMac. All rights reserved.
//

#include <iostream>
#include<queue>
using namespace std;

int n,m;
bool grid[130][130];
long long set[130][130],cur = 0;

int lowbit(int x){
    return x&(-x);
}

int getlength(int origin){
    if(origin==lowbit(origin))
        return origin;
    
    int bits = 0;
    while(origin){
        bits++, origin>>=1;
    }
    
    return 1<<bits;
}

struct node{
    int l,r,u,d;
    node(int a, int b, int c, int dd):l(a), r(b), u(c), d(dd){}
};

bool allthesame(int left, int right, int up, int down){
    int t = grid[up][left];
    
    for(int i = up; i <= down; i++)
        for(int j = left; j <= right; j++)
            if(grid[i][j]!=t)
                return 0;
    
    return 1;
}

int gettree1(int left, int right, int up, int down){
    int res = 0;
    
    queue<node> q;
    q.push(node(left,right,up,down));
    int len = right-left+1,st = 1;
    cur = 0;
    
    while(!q.empty()){
        node t = q.front();
        q.pop();
        
        int l = t.l, r = t.r, d = t.d, u = t.u;
        
        if(allthesame(l,r,u,d)){
            res++;
            continue;
        }
        
        bool has = 0;
        
        if(r-l+1<len){
            cur = 0;
            for(int i = u; i <= d; i++){
                int t = 0;
                for(int j = l; j <= r; j++)
                    t = (t<<1)+grid[i][j];
                set[cur][i-u] = t;
            }
            cur++;
            len = r-l+1;
        }
        else{
            if(st){
                st = 0;
            }
            else{
                long long temp[130];
                for(int i = u; i <= d; i++){
                    int t = 0;
                    for(int j = l; j <= r; j++)
                        t = (t<<1)+grid[i][j];
                    temp[i-u] = t;
                }
                
                for(int i = 0; i < cur; i++){
                    int j;
                    for(j = u; j <= d; j++)
                        if(set[i][j-u]!=temp[j-u])
                            break;
                    if(j==d+1){
                        has = 1;
                        break;
                    }
                }
                
                if(has==0){
                    for(int i = u; i <= d; i++){
                        int t = 0;
                        for(int j = l; j <= r; j++)
                            t = (t<<1)+grid[i][j];
                        set[cur][i-u] = t;
                    }
                    cur++;
                }
            }
        }
        
        if(has==0){
            res++;
            q.push(node(l,(l+r)/2,u,(u+d)/2));
            q.push(node((l+r)/2+1,r,u,(u+d)/2));
            q.push(node(l,(l+r)/2,(u+d)/2+1,d));
            q.push(node((l+r)/2+1,r,(u+d)/2+1,d));
        }
    }
    
    return res;
}

int gettree2(int left, int right, int up, int down){
    int res = 0;
    
    queue<node> q;
    q.push(node(left,right,up,down));
    
    while(!q.empty()){
        node t = q.front();
        q.pop();
        
        int l = t.l, r = t.r, d = t.d, u = t.u;
        
        if(allthesame(l,r,u,d)){
            res++;
            continue;
        }
        
        res++;
        q.push(node(l,(l+r)/2,u,(u+d)/2));
        q.push(node((l+r)/2+1,r,u,(u+d)/2));
        q.push(node(l,(l+r)/2,(u+d)/2+1,d));
        q.push(node((l+r)/2+1,r,(u+d)/2+1,d));
        
    }
    
    return res;
}


int main(int argc, const char * argv[])
{
    while(cin >> n >> m, n){
        int len = max(getlength(n),getlength(m));
        
        memset(grid,0,sizeof(grid));
        char c;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++){
                cin >> c;
                grid[i][j] = c=='1';
            }
        
        int res1 = gettree1(0,len-1,0,len-1), res2 = gettree2(0,len-1,0,len-1);
        
        cout << res2 << ' ' << res1 << endl;
    }
    return 0;
}

