//
//  main.cpp
//  POJ1475(1)
//
//  Created by B-YMac on 14-7-20.
//  Copyright (c) 2014å¹´ B-YMac. All rights reserved.
//

#include <iostream>
#include<cstdio>
#include<cstdlib>
#include<queue>
#include<string>
using namespace std;

char dir1[4] = {'N','S','W','E'};
char dir2[4] = {'n','s','w','e'};
char grid[21][21];
bool visit[21][21][4];

struct node{
    int x,y;
    string path;
    node(int a, int b, string d):x(a),y(b),path(d){}
};

struct bnode{
    int x,y,px,py,dir;
    string path;
    bnode(int a, int b, int c, int d, int f, string e):x(a),y(b),px(c),py(d),dir(f),path(e){}
};

int dr[4] = {-1,1,0,0}, dc[4] = {0,0,-1,1},r,c,br,bc,pr,pc,tr,tc;

bool inrange(int x, int y){
    return 0<=x&&x<r&&0<=y&&y<c&&grid[x][y]!='#';
}

string bfs_p(int str, int stc, int edr, int edc){
    queue<node> q;
    q.push(node(str,stc,""));
    bool vis[21][21];
    memset(vis,0,sizeof(vis));
    
    while(!q.empty()){
        node t = q.front();
        q.pop();
        
        int x = t.x, y = t.y;
        string path = t.path;
        
        if(x==edr&&y==edc)
            return path;
        if(vis[x][y])
            continue;
        
        vis[x][y] =1;
        for(int i = 0; i < 4; i++){
            int nx = x+dr[i], ny = y+dc[i];
            string pp = path+dir2[i];
            if(inrange(nx,ny))
                q.push(node(nx,ny,pp));
        }
    }
    return "-1";
}

string bfs_b(){
    memset(visit,0,sizeof(visit));
    queue<bnode> q;
    q.push(bnode(br,bc,pr,pc,-1,""));
    while(!q.empty()){
        bnode t = q.front();
        q.pop();
        
        int x = t.x, y = t.y, px = t.px, py = t.py;
        //cout<<x<<' ' << y << ' ' << px << ' '<< py << endl;
        string pp = t.path;
        if(x==tr&&y==tc)
            return pp;
        for(int i = 0; i < 4; i++){
            if(visit[x][y][i])
                continue;
            
            visit[x][y][i] = 1;
            int nx = x+dr[i], ny = y+dc[i];
            if(inrange(nx,ny)==0)
                continue;
            
            int psx = x,psy = y;
            switch(i){
                case 0: psx = x+1; break;
                case 1: psx = x-1; break;
                case 2: psy = y+1; break;
                case 3: psy = y-1; break;
            }
            grid[x][y] = '#';
            string np,t = bfs_p(px,py,psx,psy);
            grid[x][y] = '.';
            if(t=="-1")
                continue;
            np = pp+t;
            np += dir1[i];
            q.push(bnode(nx,ny,x,y,i,np));
        }
        
    }
    return "Impossible.";
}

int main(int argc, const char * argv[])
{
    int T = 1;
    while(scanf("%d %d",&r,&c)&&(r+c)){
        for(int i = 0; i < r; i++){
            scanf("%s",grid[i]);
            for(int j = 0; j < c; j++){
                if(grid[i][j]=='B')
                    br = i, bc = j, grid[i][j] = '.';
                else if(grid[i][j]=='T')
                    tr = i, tc = j, grid[i][j] = '.';
                else if(grid[i][j]=='S')
                    pr = i, pc = j, grid[i][j] = '.';
            }
        }
        cout << "Maze #" << T++ << endl;
        cout << bfs_b() << endl << endl;
    }
    return 0;
}

