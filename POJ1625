//
//  main.cpp
//  POJ1625
//
//  Created by B-YMac on 14-9-14.
//  Copyright (c) 2014å¹´ B-YMac. All rights reserved.
//

#include <iostream>
#include<string>
using namespace std;

int n,m,p,dp[51][55],map[256];
string forbit[11];
char canuse[51];

void init(){
    int mm = 0;
    for(int i = 0; i < p; i++){
        bool dup = 0;
        for(int j = i+1; j < p; j++)
            if(forbit[j].size()<=forbit[i].size()){
                int k = 0;
                while(k<forbit[j].size())
                    if(forbit[i][k]!=forbit[j][k])
                        break;
                    else
                        k++;
                if(k==forbit[j].size()){
                    dup = 1;
                    break;
                }
            }
        if(dup==0)
            forbit[mm++] = forbit[i];
    }
    p = mm;
}

int main(int argc, const char * argv[])
{
    memset(map,-1,sizeof(map));
    cin >> n >> m >> p;
    for(int i = 0; i < n; i++){
        cin >> canuse[i];
        map[canuse[i]] = i;
    }
    for(int i = 0; i < p; i++)
        cin >> forbit[i];
    
    init();
    for(int i = 0; i < n; i++){
        string now(1,canuse[i]);
        bool forbid = 0;
        for(int j = 0; j < p; j++)
            if(now==forbit[j]){
                forbid = 1;
                break;
            }
        if(forbid)
            dp[i][1] = 0;
        else
            dp[i][1] = 1;
    }
    
    for(int len = 2; len <= m; len++){
        for(int i = 0; i< n; i++){
            char stc = canuse[i];
            int num = 0;
            for(int j = 0; j < n; j++){
                char nxt = canuse[j];
                num+=dp[j][len-1];
                for(int k = 0; k < p; k++)
                    if(forbit[k].size()>=2&&forbit[k][0]==stc&&forbit[k][1]==nxt){
                        int ll = forbit[k].size();
                        num-=dp[map[forbit[k][ll-1]]][len-ll+1];
                    }
            }
            dp[i][len] = num;
        }
    }
    
    int res = 0;
    for(int i = 0; i < n; i++)
        res+=dp[i][m];
    cout << res << endl;
    return 0;
}

