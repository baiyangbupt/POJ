//
//  main.cpp
//  POJ1476
//
//  Created by B-YMac on 14-7-20.
//  Copyright (c) 2014å¹´ B-YMac. All rights reserved.
//

#include <iostream>
#include<queue>
using namespace std;

int flight[11][11][1001], period[11][11],n,k;

int bfs(){
    queue<int> qin, qd, qc;
    qin.push(0), qd.push(0), qc.push(0);
    int res = 0x7fffffff;
    while(!qin.empty()){
        int city = qin.front(), day = qd.front(), cost = qc.front();
        qin.pop();
        qd.pop();
        qc.pop();
        
        if(day==k){
            if(city==n-1)
                res = min(res,cost);
        }
        if(day==k+1)
            return res;
        
        for(int i = 0; i < n; i++)
            if(i!=city){
                int sche = day%period[city][i];
                if(flight[city][i][sche]==0)
                    continue;
                qin.push(i);
                qd.push(day+1);
                qc.push(cost+flight[city][i][sche]);
            }
    }
    return 0;
}

int main(int argc, const char * argv[])
{
    int T = 1;
    while(cin>>n>>k,n&&k){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++)
                if(j!=i){
                    cin>>period[i][j];
                    for(int k = 0; k < period[i][j]; k++)
                        cin >> flight[i][j][k];
                }
        }
        
        int res = bfs();
        cout << "Scenario #" << T++ << endl;
        if(res==0)
            cout << "No flight possible." << endl;
        else
            cout << "The best flight costs " << res << '.' << endl;
        cout << endl;
    }

    
    return 0;
}

